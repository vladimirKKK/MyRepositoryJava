package xml;

import catalog.*;
import java.io.*;
import java.util.regex.*;
import java.util.*;

public class FindParticipantsOfPpresentationControl {
    public static void main(String[] args) throws FileNotFoundException,
    IOException {
 // --------------------------------------------------
    // поиск файла в каталоге по расширению
    List<String> files = FindFilesInCatalog.printCatalog(
            "C:\\WORK\\JAVA\\Temp", "xml");

    // ---------------------------------------------------
    for (String fileName : files) {
        // String fileName = "C:\\WORK\\JAVA\\Temp\\events.xml";
        System.out.println(fileName);

        BufferedReader br = new BufferedReader(new InputStreamReader(
                new FileInputStream(fileName), "UTF-8"));
        StringBuilder stringBuilder = new StringBuilder();
        String line, contentsFile;

        while ((line = br.readLine()) != null) {
            stringBuilder.append(line + "\n");
        }
        contentsFile = stringBuilder.toString();
        br.close();
        //System.out.println(contentsFile);

        // ---------------------------------------------------
        // Поиск названия лекции
        Pattern namePattern = Pattern
                .compile(".*Написание и оптимизация SQL запросов[\\n.]*");
        Matcher nameMatcher = namePattern.matcher(contentsFile);
        if (nameMatcher.find()) {
            System.out.println(nameMatcher.find());
            
            // --------------------------------------------------
            // шаблон поиска id и времени входа
            // Pattern regexP = Pattern
            // .compile(".*([0-9]{10})[0-9]{3}.*(PARTICIPANT).*(ParticipantLeftEvent).*\\n.*\\<userId\\>([0-9]{2,3})\\<.*");

            // шаблон поиска времени входа
            // Pattern regexP =
            // Pattern.compile(".*([0-9]{10})[0-9]{3}.*(ParticipantJoinEvent).*",
            // Pattern.DOTALL);

            // шаблон поиска id и времени входа
            // Pattern regexP = Pattern
            // .compile(".*([0-9]{10})[0-9]{3}.*(PARTICIPANT).*(ParticipantJoinEvent).*\\n.*\\<userId\\>([0-9]{2,3})\\<.*");

            // Pattern regexP = Pattern.compile("<"+tag+">.*</"+tag+">");
            // /Pattern regexP =
            // Pattern.compile(".*([0-9]{10})[0-9]{3}.*(ParticipantJoinEvent\\>).*");
            // ParticipantJoinEvent\\>\n\\<userId\\>([0-9]{2,3})\\<.*"
            // шаблон поиска имени и фамилии
            // -----------------------------------------------------
            Pattern idNamePattern = Pattern
                    .compile(".*\\<callernumber\\>([0-9]{1,3})\\-(.*)\\<.*");
            Matcher idNameMatcher = idNamePattern.matcher(contentsFile);
            Map<String, String> participant = new HashMap<String, String>();
            while (idNameMatcher.find()) {
                String id = idNameMatcher.group(1);
                String name = idNameMatcher.group(2);
                participant.put(id, name);
            }
            // for(Entry<String , String > entry : participant.entrySet()){
            // System.out.println(entry.getKey() + "   " +
            // entry.getValue());
            // }
             System.out.println(participant);
            // ---------------------------------------------------------
            Map<String, Attendence> participantFullInfo = new HashMap<String, Attendence>();

            // ---------------------------------------------------------
            Pattern idTimeEnterPattern = Pattern
                    .compile(".+(\\d{10})\\d{3}.*PARTICIPANT.*ParticipantJoinEvent.+\n*.+\n*.+\n*.+\\<userId\\>(\\d{2,3})\\<\\/+userId\\>|.*(\\d{10})\\d{3}.*PARTICIPANT.*ParticipantLeftEvent.*\\n.*\\<userId\\>(\\d{2,3})\\<.*");
            Matcher idTimeEnterOutMatcher = idTimeEnterPattern
                    .matcher(contentsFile);
            /* пока найдено соответствие шаблону: время входа или выхода */
            while (idTimeEnterOutMatcher.find()) {
                /* если id входа не равно null */
                if (idTimeEnterOutMatcher.group(2) != null) {
                    /* если в результирующей Map для данного id есть объект */
                    if (participantFullInfo
                            .containsKey(idTimeEnterOutMatcher.group(2))) {
                        /*
                         * добавить в List новый оъект timeInOut для данного
                         * id
                         */

                        /* найти оъект Attendence для данного id выхода */
                        Attendence attendence = participantFullInfo
                                .get(idTimeEnterOutMatcher.group(2));
                        /* получить List из Attendence для данного id выхода */
                        List<SaveTime> timeInOut = attendence
                                .getTimeInOut();
                        /*
                         * создать новый оъект timeInOut для данного id и
                         * нового времени входа
                         */
                        String s = idTimeEnterOutMatcher.group(1);
                        
                        Date t = new Date(Long.parseLong(s));
                        SaveTime saveTime = new SaveTime( t, null);
                        /*
                         * добавить в List новый оъект timeInOut для данного
                         * id
                         */
                        timeInOut.add(saveTime);
                        /*
                         * если в результирующей Map для данного id нет
                         * объекта
                         */
                    } else {
                        /*
                         * если для данного id есть соответствие в Map
                         * participant с именами
                         */
                        if (participant.get(idTimeEnterOutMatcher.group(2)) != null) {
                            /*
                             * создать новый оъект timeInOut для данного id
                             * и нового времени входа
                             */
                            String s = idTimeEnterOutMatcher.group(1);
                            
                            Date t = new Date(Long.parseLong(s));
                            SaveTime saveTime = new SaveTime( t, null);
                            /*
                             * создать List для хранения объектов SaveTime
                             * для данного id выхода
                             */
                            List<SaveTime> timeInOut = new ArrayList<SaveTime>();
                            /*
                             * поместить в List объект SaveTime для данного
                             * id выхода
                             */
                            timeInOut.add(saveTime);
                            /*
                             * создать Attendence объект для данного id
                             * выхода
                             */
                            Attendence attendence = new Attendence(
                                    participant.get(idTimeEnterOutMatcher
                                            .group(2)), timeInOut);
                            /*
                             * положить ключ id выхода и объект Attendence в
                             * результирующую Map
                             */
                            participantFullInfo.put(
                                    idTimeEnterOutMatcher.group(2),
                                    attendence);
                        }
                    }
                }
                /* если id входа равно null, значит это id выхода */
                else {
                    /* найти оъект participantFullInfo для данного id выхода */
                    if (participant.get(idTimeEnterOutMatcher.group(4)) != null) {
                        /* найти оъект Attendence для данного id выхода */
                        Attendence attendence = participantFullInfo
                                .get(idTimeEnterOutMatcher.group(4));
                        /* получить List из Attendence для данного id выхода */
                        List<SaveTime> timeInOut = attendence
                                .getTimeInOut();
                        /*
                         * получить последний элемент из List из Attendence
                         * для данного id выхода
                         */
                        SaveTime saveTime = timeInOut
                                .get(timeInOut.size() - 1);
                        /*
                         * установить время выхода в последнем элементе из
                         * List из Attendence для данного id выхода
                         */
                        String s = idTimeEnterOutMatcher.group(3);
                        
                        Date t = new Date(Long.parseLong(s));
                        saveTime.setOutputTime(t);
                    }
                }
            }

            // ------------------------------------------------------------------

            /* контрольный блок */
            for (Map.Entry<String, Attendence> entry : participantFullInfo
                    .entrySet()) {
                System.out.print("Id : " + entry.getKey() + "   \t name:  "
                        + entry.getValue().getName()+ "\t\t  ");
                for (SaveTime saveTime : entry.getValue().getTimeInOut()) {
                    System.out.println("  Time enter  " + saveTime.getInputTime() + "\t"
                            + " Time exit " + saveTime.getOutputTime());
                    
                }
            }
        }
    }
}
}
